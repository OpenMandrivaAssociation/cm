diff -urN cm-0.2/lib/class/class.c cm-0.2-patched/lib/class/class.c
--- cm-0.2/lib/class/class.c	2012-02-22 10:38:13.000000000 +0100
+++ cm-0.2-patched/lib/class/class.c	2012-06-15 06:46:49.998525197 +0200
@@ -57,9 +57,9 @@
 
 /* the remaining functions are put separately as their code is quite long    */
 static void real_compute_minpoly (cm_class_t c, mpc_t *conjugate,
-   cm_form_t *nsystem, bool print);
+   cm_form_t *nsystem, bool print, bool verbose);
 static void complex_compute_minpoly (cm_class_t c, mpc_t *conjugate,
-   bool print);
+   bool print, bool verbose);
 static bool doubleeta_compute_parameter (cm_class_t *c);
 static mpz_t* weber_cm_get_j_mod_P (cm_class_t c, mpz_t root, mpz_t P,
    int *no, bool verbose);
@@ -1035,9 +1035,9 @@
 
    cm_timer_start (clock_local);
    if (c.field == CM_FIELD_REAL)
-      real_compute_minpoly (c, conjugate, nsystem, print);
+      real_compute_minpoly (c, conjugate, nsystem, print, verbose);
    else
-      complex_compute_minpoly (c, conjugate, print);
+      complex_compute_minpoly (c, conjugate, print, verbose);
    cm_timer_stop (clock_local);
    if (verbose)
       printf ("--- Time for polynomial reconstruction: %.1f\n",
@@ -1065,7 +1065,7 @@
 /*****************************************************************************/
 
 static void real_compute_minpoly (cm_class_t c, mpc_t *conjugate,
-   cm_form_t *nsystem, bool print)
+   cm_form_t *nsystem, bool print, bool verbose)
    /* computes the minimal polynomial of the function over Q                 */
    /* frees conjugates                                                       */
 
@@ -1114,7 +1114,7 @@
    }
 
    mpfrx_init (mpol, c.minpoly_deg + 1, factors [0]->prec);
-   mpfrx_reconstruct (mpol, factors, (c.h1+1)/2 + c.h2);
+   mpfrx_reconstruct (mpol, factors, (c.h1+1)/2 + c.h2, verbose);
    for (i = 0; i < (c.h1+1)/2 + c.h2; i++)
       mpfrx_clear (factors [i]);
    free (factors);
@@ -1196,7 +1196,7 @@
 /*****************************************************************************/
 
 static void complex_compute_minpoly (cm_class_t c, mpc_t *conjugate,
-   bool print)
+   bool print, bool verbose)
    /* computes the minimal polynomial of the function over Q (sqrt D)        */
    /* frees conjugates                                                       */
 
@@ -1221,7 +1221,7 @@
    free (conjugate);
 
    mpcx_init (mpol, c.minpoly_deg + 1, factors [0]->prec);
-   mpcx_reconstruct (mpol, factors, c.h12);
+   mpcx_reconstruct (mpol, factors, c.h12, verbose);
    for (i = 0; i < c.h12; i++)
       mpcx_clear (factors [i]);
    free (factors);
